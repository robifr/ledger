/**
 * Copyright 2024 Robi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.robifr.ledger.data.model

import android.os.Parcelable
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.Ignore
import androidx.room.PrimaryKey
import com.robifr.ledger.util.Strings
import kotlinx.parcelize.Parcelize

/**
 * @param id Product unique ID. Set to null for the value to be auto-generated by Room. See
 *   [Model.modelId] For the reason of why it's boxed type.
 * @param name Product name.
 * @param price Product price.
 */
@JvmRecord
@Parcelize
@Entity(tableName = "product")
data class ProductModel(
    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "id") val id: Long?,
    @ColumnInfo(name = "name") val name: String,
    @ColumnInfo(name = "price") val price: Long
) : Model, Parcelable {
  companion object {
    @JvmStatic fun toBuilder(): NameBuild = NewBuilder()

    @JvmStatic
    fun toBuilder(product: ProductModel): EditBuild =
        EditBuilder().setId(product.id).setName(product.name).setPrice(product.price)
  }

  @Ignore override fun modelId(): Long? = this.id

  @Ignore override fun toString(): String = Strings.classToString(this)

  interface NameBuild {
    fun setName(name: String): NewBuild
  }

  interface NewBuild {
    fun setId(id: Long?): NewBuild

    fun setPrice(price: Long): NewBuild

    fun build(): ProductModel
  }

  interface EditBuild : NewBuild {
    override fun setId(id: Long?): EditBuild

    override fun setPrice(price: Long): EditBuild

    fun setName(name: String): EditBuild
  }

  private abstract class Builder : NewBuild {
    protected lateinit var _name: String
    protected var _id: Long? = null
    protected var _price: Long = 0L

    override fun build(): ProductModel = ProductModel(this._id, this._name, this._price)
  }

  private class NewBuilder : Builder(), NameBuild {
    override fun setName(name: String): NewBuild = this.apply { this._name = name }

    override fun setId(id: Long?): NewBuild = this.apply { this._id = id }

    override fun setPrice(price: Long): NewBuild = this.apply { this._price = price }
  }

  private class EditBuilder : Builder(), EditBuild {
    override fun setName(name: String): EditBuild = this.apply { this._name = name }

    override fun setId(id: Long?): EditBuild = this.apply { this._id = id }

    override fun setPrice(price: Long): EditBuild = this.apply { this._price = price }
  }
}
