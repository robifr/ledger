/**
 * Copyright 2024 Robi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.robifr.ledger.data.model

import android.os.Parcelable
import androidx.annotation.ColorRes
import androidx.annotation.StringRes
import androidx.room.ColumnInfo
import androidx.room.Entity
import androidx.room.ForeignKey
import androidx.room.Ignore
import androidx.room.Index
import androidx.room.PrimaryKey
import androidx.room.TypeConverters
import com.robifr.ledger.R
import com.robifr.ledger.local.InstantConverter
import java.math.BigDecimal
import java.time.Instant
import kotlinx.parcelize.Parcelize

/**
 * @property id Queue unique ID. Set to null for the value to be auto-generated by Room.
 * @property customerId Referenced customer ID from [CustomerModel.id].
 * @property status Queue status.
 * @property date Queue date.
 * @property paymentMethod Queue payment method.
 * @property customer Referenced customer instance if [customerId] available.
 * @property productOrders List of referenced ordered products.
 * @see Model.id
 */
@Parcelize
@Entity(
    tableName = "queue",
    foreignKeys =
        [
            ForeignKey(
                entity = CustomerModel::class,
                parentColumns = ["id"],
                childColumns = ["customer_id"],
                onUpdate = ForeignKey.CASCADE,
                onDelete = ForeignKey.SET_NULL)],
    indices = [Index(value = ["customer_id"])])
data class QueueModel(
    @PrimaryKey(autoGenerate = true) @ColumnInfo(name = "id") override val id: Long? = null,
    @ColumnInfo(name = "customer_id") val customerId: Long? = null,
    @ColumnInfo(name = "status") val status: Status,
    @ColumnInfo(name = "date") @field:TypeConverters(InstantConverter::class) val date: Instant,
    @ColumnInfo(name = "payment_method") val paymentMethod: PaymentMethod,
    @ColumnInfo(name = "note") val note: String = "",
    @Ignore val customer: CustomerModel? = null,
    @Ignore val productOrders: List<ProductOrderModel> = listOf()
) : Model, Parcelable {
  /** Reserved constructor to be used by Room upon querying. */
  constructor(
      id: Long?,
      customerId: Long?,
      status: Status,
      date: Instant,
      paymentMethod: PaymentMethod,
      note: String
  ) : this(id, customerId, status, date, paymentMethod, note, null, listOf())

  @Ignore fun grandTotalPrice(): BigDecimal = productOrders.sumOf { it.totalPrice }

  @Ignore fun totalDiscount(): BigDecimal = productOrders.sumOf { it.discount.toBigDecimal() }

  enum class Status(
      @StringRes val stringRes: Int,
      @ColorRes val backgroundColorRes: Int,
      @ColorRes val textColorRes: Int
  ) {
    IN_QUEUE(R.string.enum_queueStatus_inQueue, R.color.light_yellow, R.color.dark_yellow),
    IN_PROCESS(R.string.enum_queueStatus_inProcess, R.color.light_blue, R.color.dark_blue),
    UNPAID(R.string.enum_queueStatus_unpaid, R.color.light_red, R.color.dark_red),
    COMPLETED(R.string.enum_queueStatus_completed, R.color.light_gray, R.color.darker_gray)
  }

  enum class PaymentMethod(@StringRes val stringRes: Int) {
    CASH(R.string.enum_queuePaymentMethod_cash),
    ACCOUNT_BALANCE(R.string.enum_queuePaymentMethod_accountBalance)
  }
}
